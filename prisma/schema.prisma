// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  GUEST
  RECEPTIONIST
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

model user {
  id                 String    @id @default(uuid())
  name               String
  email              String    @unique
  password           String?
  role               Role      @default(GUEST)
  verified           Boolean   @default(false)
  created_at         DateTime  @default(now())
  verification_token String?   @unique
  gender             Gender?
  birth_date         DateTime?
  city_of_residence  String?
  mobile_number      String?

  bookings   booking[]
  room_types room_type[]
  rooms      room[]

  @@map("users")
}

model room_type {
  id              String   @id @default(uuid())
  type_name       String   @unique
  price_per_night Float
  description     String   @db.Text
  photo           String
  created_at      DateTime @default(now())
  created_by      user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  rooms  room[]
  userId String

  @@map("room_types")
}

model room {
  id           String  @id @default(uuid())
  room_number  Int     @unique
  is_available Boolean @default(true)

  room_type   room_type @relation(fields: [room_typeId], references: [id], onDelete: Cascade)
  room_typeId String
  created_by  user      @relation(fields: [userId], references: [id], onDelete: Cascade)
  created_at  DateTime  @default(now())

  bookings booking[]
  userId   String

  @@map("rooms")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model booking {
  id             String        @id @default(uuid())
  check_in_at    DateTime
  check_out_at   DateTime
  booking_status BookingStatus @default(PENDING)
  booked_at      DateTime      @default(now())

  guest   user     @relation(fields: [guestId], references: [id], onDelete: Cascade)
  guestId String
  room    room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId  String
  reviews review[]

  @@map("bookings")
}

model review {
  id           String   @id @default(uuid())
  guest_name   String
  rate         Int
  testimony    String   @db.Text
  submitted_at DateTime @default(now())
  booking      booking  @relation(fields: [bookingId], references: [id])

  bookingId String
}
